AC_INIT(src/main.cc)
AM_INIT_AUTOMAKE([amSynth], 'svn')
AC_CONFIG_HEADERS([config.h])

# capture user-supplied compiler flags before AC_PROG_CC clobbers them
user_CFLAGS="$CFLAGS"
user_CXXFLAGS="$CXXFLAGS"

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL

AC_LANG(C++)

#
# Use optimised compiler flags unless CFLAGS have been provided by user.
#
# These can be overriden at compile time with the CFLAGS and CXXFLAGS variables, e.g.
#   ./configure CFLAGS='-g -O0' CXXFLAGS='-g -O0'
#
AC_MSG_CHECKING([whether optimized CFLAGS should be used])
if test "$user_CFLAGS" = "" -a "$user_CXXFLAGS" = "" ; then
	CFLAGS="-Wall -W -O3 -ffast-math -fno-exceptions -fomit-frame-pointer"
	CXXFLAGS="$CFLAGS"
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi

dnl
dnl
dnl	Check for required headers & libraries
dnl
dnl

AC_CHECK_LIB(m, sin,, exit)
AC_CHECK_LIB(dl, dlopen,, exit)
AC_CHECK_LIB(pthread, pthread_create,, exit)


dnl ## http://www.gtkmm.org/docs/gtkmm-2.4/docs/reference/html/newin2p6s.html
dnl ## we use the following APIs only available in gtkmm 2.6 and up:
dnl ## Gtk::MessageDialog::set_secondary_text()
dnl ## Gtk::AboutDialog
PKG_CHECK_MODULES(DEPS, gtkmm-2.4 >= 2.6.0)
AC_SUBST(DEPS_CFLAGS)
AC_SUBST(DEPS_LIBS)

dnl
dnl
dnl	User Options
dnl
dnl	sets variables like "with_feature=[yes|no]"
dnl

dnl	OSS support
AC_ARG_WITH(oss, 
[  --with-oss              enable OSS support (default=yes)],
[
   if test $withval = "yes"; then
     with_oss=yes
   else
     with_oss=no
  fi
], with_oss=yes)

dnl	ALSA support
AC_ARG_WITH(alsa, 
[  --with-alsa             enable ALSA support (default=yes)],
[
   if test $withval = "yes"; then
     with_alsa=yes
   else
     with_alsa=no
  fi
], with_alsa=yes)

dnl	JACK support
AC_ARG_WITH(jack, 
[  --with-jack             enable JACK support (default=yes)],
[
   if test $withval = "yes"; then
     with_jack=yes
   else
     with_jack=no
  fi
], with_jack=yes)

dnl	LASH support
AC_ARG_WITH(lash, 
[  --with-lash             enable LASH support (default=yes)],
[
   if test $withval = "yes"; then
     with_lash=yes
   else
     with_lash=no
  fi
], with_lash=yes)

dnl     .WAV OUT support
AC_ARG_WITH(sndfile, 
[  --with-sndfile          enable .WAV file output support (default=yes)],
[
   if test $withval = "yes"; then
     with_sndfile=yes
   else
     with_sndfile=no
  fi
], with_sndfile=yes)

dnl
dnl
dnl
AC_ARG_ENABLE([realtime], [AS_HELP_STRING([--enable-realtime],
               [use the Linux SCHED_FIFO scheduler to improve performance,
                requires binary to be installed as root with suid bit enabled
                (default is no)])],
              [AC_DEFINE([ENABLE_REALTIME], [],
               [Use the Linux SCHED_FIFO scheduler to improve performance.])]
              )
AM_CONDITIONAL([ENABLE_REALTIME], [test x$enable_realtime != x])

dnl
dnl
dnl	Check for optional headers & libraries
dnl
dnl

AC_CHECK_HEADERS(sys/soundcard.h,, 	with_oss=no)
AC_CHECK_HEADERS(alsa/asoundlib.h,, 	with_alsa=no)
AC_CHECK_HEADERS(jack/jack.h,, 		with_jack=no)
AC_CHECK_HEADERS(sndfile.h,,            with_sndfile=no)



dnl
dnl
dnl	Set compiler options accordingly
dnl
dnl

if test "$with_oss" = "yes"; then
	AM_CPPFLAGS="$AM_CPPFLAGS -Dwith_oss"
fi
if test "$with_alsa" = "yes"; then 
	AM_CPPFLAGS="$AM_CPPFLAGS -Dwith_alsa"
	LIBS="$LIBS -lasound"
fi
if test "$with_jack" = "yes"; then 
	AC_CHECK_HEADERS([jack/midiport.h jack/session.h])
	AM_CPPFLAGS="$AM_CPPFLAGS -Dwith_jack"
	LIBS="$LIBS -ljack"
fi
if test "$with_lash" = "yes"; then 
	PKG_CHECK_MODULES(LASH, [lash-1.0 >= 0.5.0], with_lash="yes", with_lash="no")
fi
if test "$with_lash" = "yes"; then 
	AM_CPPFLAGS="$AM_CPPFLAGS -Dwith_lash"
	AC_SUBST(LASH_CFLAGS)
	AC_SUBST(LASH_LIBS)
fi
if test "$with_sndfile" = "yes"; then
	AM_CPPFLAGS="$AM_CPPFLAGS -Dwith_sndfile"
	LIBS="$LIBS -lsndfile"
fi

AC_SUBST(AM_CPPFLAGS)
AC_SUBST(LIBS)

AC_OUTPUT([
Makefile
src/Makefile 
src/drivers/Makefile
src/VoiceBoard/Makefile
src/GUI/Makefile
src/Effects/Makefile
skel/Makefile
skins/Makefile
skins/default/Makefile
amsynth.desktop
autopackage/default.apspec
])


dnl
dnl
dnl	Output summary message..
dnl
dnl

echo
echo -------------------------------------------------------- $PACKAGE $VERSION
echo \|
echo \| GTK-- version......................................... : `pkg-config --modversion gtkmm-2.4`
echo \|
echo \| Build with OSS support................................ : $with_oss
echo \| Build with ALSA support............................... : $with_alsa
echo \| Build with JACK support............................... : $with_jack
echo \| Build with LASH support............................... : $with_lash
echo \|
echo \| Use libsndfile for .wav output support................ : $with_sndfile
echo 
echo configure complete. now type \'make\' to build $PACKAGE
echo and then, as root, \'make install\' to install
echo
